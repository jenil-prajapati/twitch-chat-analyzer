# -*- coding: utf-8 -*-
"""Twitch Chat Sentimental Analyzer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Rw5j0VmZygzpSth_30INlzafpwEE9HFJ
"""

!pip install requests

import requests

CLIENT_ID = "016rhojju09e5a4gdakuaajh37o88o"
CLIENT_SECRET = "7qrsi4b9o7e1u2hjhq6r1qn5k31gsv"

AUTH_URL = "https://id.twitch.tv/oauth2/token"

# Requesting an OAuth token
params = {
    "client_id": CLIENT_ID,
    "client_secret": CLIENT_SECRET,
    "grant_type": "client_credentials"
}

response = requests.post(AUTH_URL, params=params)
data = response.json()

if "access_token" in data:
    ACCESS_TOKEN = data["access_token"]
    print("Twitch Access Token:", ACCESS_TOKEN)
else:
    print("Error:", data)

import os

os.environ["TWITCH_CLIENT_ID"] = CLIENT_ID
os.environ["TWITCH_CLIENT_SECRET"] = CLIENT_SECRET
os.environ["TWITCH_ACCESS_TOKEN"] = ACCESS_TOKEN

headers = {
    "Client-ID": os.getenv("TWITCH_CLIENT_ID"),
    "Authorization": f"Bearer {os.getenv('TWITCH_ACCESS_TOKEN')}"
}

params = {
    "login": "jp_4007"  # Replace with your actual Twitch username
}

response = requests.get("https://api.twitch.tv/helix/users", headers=headers, params=params)
print(response.json())  # Should return user details

!pip install flask flask-ngrok

import requests
import webbrowser
from flask import Flask, request
from threading import Thread

# ‚úÖ Replace with your Twitch Developer Credentials
CLIENT_ID = "016rhojju09e5a4gdakuaajh37o88o"  # Replace with your actual Twitch Client ID
CLIENT_SECRET = "7qrsi4b9o7e1u2hjhq6r1qn5k31gsv"  # Replace with your actual Twitch Client Secret
REDIRECT_URI = "http://localhost:5001"  # Ensure this matches your Twitch App settings
SCOPE = "user:read:email"  # Adjust based on what you need

# Twitch Authorization URL
AUTH_URL = f"https://id.twitch.tv/oauth2/authorize?client_id={CLIENT_ID}&redirect_uri={REDIRECT_URI}&response_type=code&scope={SCOPE}"

# Flask App to Capture Auth Code
app = Flask(__name__)

@app.route("/")
def home():
    return "Twitch OAuth Callback Running!"

@app.route("/callback")
def callback():
    auth_code = request.args.get("code")
    return f"‚úÖ Authorization Code: {auth_code} (Copy and paste this in your script!)", 200

# Run Flask Server in Background
def run_flask():
    app.run(port=5000, debug=False, use_reloader=False)

# Start Flask in Background
thread = Thread(target=run_flask)
thread.start()

# Open Twitch Auth URL in Browser
webbrowser.open(AUTH_URL)

!fuser -k 5000/tcp

import requests

# Use the credentials from your Twitch Developer Console
CLIENT_ID = "016rhojju09e5a4gdakuaarjh37o88o"  # Your actual Client ID
CLIENT_SECRET = "c4cq5v0jtoaxded5a0zri1xgm16xt8"  # Your actual Client Secret
AUTH_CODE = "x4uvms3k4l9h1cjr5jrw8ofhzhuok0"  # Replace with your actual code from the URL
REDIRECT_URI = "http://localhost"  # Must match your Twitch app settings

TOKEN_URL = "https://id.twitch.tv/oauth2/token"

params = {
    "client_id": CLIENT_ID,
    "client_secret": CLIENT_SECRET,
    "code": AUTH_CODE,
    "grant_type": "authorization_code",
    "redirect_uri": REDIRECT_URI
}

response = requests.post(TOKEN_URL, params=params)
data = response.json()

if "access_token" in data:
    ACCESS_TOKEN = data["access_token"]
    print("‚úÖ Your Twitch User Access Token:", ACCESS_TOKEN)
else:
    print("‚ùå Error:", data)

import os

os.environ["TWITCH_TOKEN"] = "jawoesviz8gyre4jo9cv8xcwqlv4ga"  # Replace with actual token
os.environ["TWITCH_CLIENT_ID"] = "016rhojju09e5a4gdakuaajh37o88o"

print("‚úÖ Twitch token stored successfully!")

headers = {
    "Client-ID": os.getenv("TWITCH_CLIENT_ID"),
    "Authorization": f"Bearer {os.getenv('TWITCH_TOKEN')}"
}

params = {
    "login": "jp_4007"  # Replace with your actual Twitch username
}

response = requests.get("https://api.twitch.tv/helix/users", headers=headers, params=params)
print(response.json())  # Should return user details

import requests

CLIENT_ID = "016rhojju09e5a4gdakuaajh37o88o"
CLIENT_SECRET = "c4cq5v0jtoaxded5a0zri1xgm16xt8"
REDIRECT_URI = "http://localhost"  # Must match your Twitch app redirect URI
CODE = "paste_your_code_here"  # Copy the code from the browser URL

TOKEN_URL = "https://id.twitch.tv/oauth2/token"
params = {
    "client_id": CLIENT_ID,
    "client_secret": CLIENT_SECRET,
    "code": CODE,
    "grant_type": "authorization_code",
    "redirect_uri": REDIRECT_URI
}

response = requests.post(TOKEN_URL, params=params)
data = response.json()
print(data)  # Should contain "access_token"

import os
import asyncio
import websockets
import json
import re
import nltk
import time
import matplotlib.pyplot as plt
import pandas as pd
from collections import deque
from nltk.sentiment import SentimentIntensityAnalyzer
from google.colab import output
import nest_asyncio


!pip install transformers torch
!pip install websockets
!pip install nltk
!pip install wordcloud matplotlib
!pip install ipywidgets


nltk.download('vader_lexicon')

nest_asyncio.apply()

sia = SentimentIntensityAnalyzer()


TWITCH_IRC = "wss://irc-ws.chat.twitch.tv:443"

time_series_data = deque(maxlen=100)

TWITCH_TOKEN = os.getenv("TWITCH_TOKEN")
TWITCH_CLIENT_ID = os.getenv("TWITCH_CLIENT_ID")

userdata.get('TWITCH_Client_ID')
userdata.get('TWITCH_Authorization')

import requests
import ipywidgets as widgets
from IPython.display import display

Authorization = userdata.get('TWITCH_Authorization')
Client_ID = userdata.get('TWITCH_Client_ID')

HEADERS = {
    "Client-ID": Client_ID,
    "Authorization": f"Bearer {Authorization}"
}

def fetch_top_streamers():
    url = "https://api.twitch.tv/helix/streams"
    params = {"first": 10}
    response = requests.get(url, headers=HEADERS, params=params)

    if response.status_code == 200:
        data = response.json()
        return [stream["user_name"] for stream in data["data"]]
    else:
        print(f"‚ùå Error fetching streams: {response.status_code} - {response.json()}")
        return []

top_streamers = fetch_top_streamers()
top_streamers.insert(0, "Choose from Top Live...")

title = widgets.HTML("<h3>üî¥ Analyze a Twitch Stream</h3>")

dropdown_label = widgets.Label("üé• Top Live Streamers:")
dropdown = widgets.Dropdown(options=top_streamers, layout=widgets.Layout(width="50%"))

text_input_label = widgets.Label("üîç Choose Your Own Streamer:")
text_input = widgets.Text(placeholder="Enter streamer name...", layout=widgets.Layout(width="50%"))

button = widgets.Button(description="‚úÖ Select Streamer", button_style="success", layout=widgets.Layout(width="50%"))

output = widgets.Output()
TWITCH_CHANNEL = ""

def on_button_click(b):
    global TWITCH_CHANNEL
    with output:
        output.clear_output()
        if dropdown.value != "Choose from Top Live...":
            TWITCH_CHANNEL = f"#{dropdown.value}"
            print(f"‚úÖ Twitch Channel set to: {TWITCH_CHANNEL}")
        elif text_input.value:
            TWITCH_CHANNEL = f"#{text_input.value}"
            print(f"‚úÖ Twitch Channel set to: {TWITCH_CHANNEL}")
        else:
            print("‚ö†Ô∏è Please select or enter a streamer!")

button.on_click(on_button_click)

display(widgets.VBox([
    title,
    dropdown_label, dropdown,
    text_input_label, text_input,
    button,
    output
]))

print (TWITCH_CHANNEL)

"""# Introduction

**Overview**:
The Twitch Vibe Tracker is a real-time sentiment analysis application that monitors Twitch chat messages and provides insights into the emotional state of the chat room.
"""

import asyncio
import websockets
import re
import time
import pandas as pd
from nltk.sentiment import SentimentIntensityAnalyzer

TWITCH_TOKEN = userdata.get('TWITCH_TOKEN')

# Storage for chat messages
messages_data = []
MAX_MESSAGES = 500

# Initialize Sentiment Analyzer
sia = SentimentIntensityAnalyzer()

async def connect_to_twitch():
    """Connects to Twitch chat and collects messages."""
    while True:  # Retry connection on failure
        try:
            async with websockets.connect(TWITCH_IRC) as ws:
                await ws.send(f"PASS {TWITCH_TOKEN}")
                await ws.send(f"JOIN {TWITCH_CHANNEL}")

                print(f"Joined {TWITCH_CHANNEL} chat...")

                while len(messages_data) < MAX_MESSAGES:
                    response = await ws.recv()
                    await process_message(ws, response)

                # Save messages to CSV
                df = pd.DataFrame(messages_data)
                df.to_csv("data/twitch_mood.csv", index=False)
                print("Saved messages to data/twitch_mood.csv")
                break  # Exit loop after collecting enough messages

        except (websockets.exceptions.ConnectionClosed, ConnectionResetError) as e:
            print(f"Connection lost: {e}. Reconnecting in 5 seconds...")
            await asyncio.sleep(5)  # Wait before retrying

async def process_message(ws, response):
    """Processes messages from Twitch chat."""
    global messages_data

    # Handle Twitch PING-PONG
    if "PING :tmi.twitch.tv" in response:
        await ws.send("PONG :tmi.twitch.tv")
        return

    # Extract chat message
    match = re.search(r":(.*?)!.*? PRIVMSG #.*? :(.*)", response)
    if match:
        username = match.group(1)
        message = match.group(2)
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime())

        # Sentiment analysis
        sentiment_score = sia.polarity_scores(message)['compound']

        # Store message data
        messages_data.append({
            "timestamp": timestamp,
            "username": username,
            "message": message,
            "sentiment": sentiment_score
        })

        print(f"[{timestamp}] {username}: {message} (Sentiment: {sentiment_score})")

# Run Twitch connection
await connect_to_twitch()

import pandas as pd

# Load Data
df = pd.read_csv("data/twitch_mood.csv")

# Show first few rows
print(df.head())

import pandas as pd
import matplotlib.pyplot as plt

# Load the collected data
df = pd.read_csv("data/twitch_mood.csv")

# Convert timestamps to datetime format
df['timestamp'] = pd.to_datetime(df['timestamp'])

# Sort data by time (to ensure proper plotting)
df = df.sort_values(by='timestamp')

# Plot sentiment over time
plt.figure(figsize=(12, 6))
plt.plot(df['timestamp'], df['sentiment'], marker='o', linestyle='-', alpha=0.6)
plt.xlabel("Timestamp")
plt.ylabel("Sentiment Score")
plt.title("Sentiment Trend in Twitch Chat")
plt.xticks(rotation=45)
plt.grid()

# Show plot
plt.show()

